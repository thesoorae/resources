{"version":3,"sources":["webpack:///webpack/bootstrap 7bf14ecdce6288ca889e","webpack:///./main.js","webpack:///./js/board.js","webpack:///./js/control.js","webpack:///./js/cell.js","webpack:///./js/rabbit.js","webpack:///./js/animal.js","webpack:///./js/wolf.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAoC,UAAU;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAkC,UAAU;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAkC,UAAU;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACnIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAgB,sBAAsB;AACtC;AACA;AACA,sBAAqB,sBAAsB;AAC3C;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAkB,sBAAsB;AACxC,oBAAmB,uBAAuB;AAC1C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAmB,sBAAsB;AACzC,sBAAqB,uBAAuB;AAC5C;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;;AAEA,2BAA0B,6BAA6B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;;AAEA;AACA,UAAS;AACT;AACA;AACA,YAAW;AACX;AACA;;AAEA;AACA;;AAEA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;;AAEA;;;;;;;ACxUA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,sCAAqC,UAAU;AAC/C;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,yCAAwC,UAAU;;AAElD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,oCAAmC,UAAU;AAC7C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;;;AAGA;;AAEA;;;;;;;ACxKA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;;AAEA;;;;;;;AC7IA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,mBAAkB,OAAO;AACzB;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;;;;;;ACjHA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2BAA0B,GAAG;AAC7B;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;;;;;;;ACtCA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;;AAGA;;AAEA;AACA;AACA,MAAK;AACL;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA","file":"./js/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 7bf14ecdce6288ca889e","const Board = require('./js/board');\nconst Control = require('./js/control');\n\n\ndocument.addEventListener(\"DOMContentLoaded\", function(){\n  const canvas = document.getElementById('gameCanvas');\n  const ctx = canvas.getContext('2d');\n  const frame = document.getElementById('frame');\n  const canvasContainer = document.getElementById('canvas-container');\n  canvas.width = 12 * 70;\n  // 10 * 50;\n  canvas.height = 12* 50;\n  frame.style.width = 1400;\n  frame.style.height = 700;\n  canvas.style.width = canvas.width;\n  canvas.style.height = canvas.height;\n\n  let control = new Control(frame, ctx);\n\n  control.createControls();\n\n  canvasContainer.onclick = function fun() {\n        control.toggleGame();\n      };\n    });\n// const createControls = (board) => {\n//   let prey_params = {\n//     'init-food': 1,\n//       'm-rate': 2,\n//       'm-age': 17,\n//       'r-age': 5,\n//       'r-food': 25,\n//       'max-food':25\n//     };\n//   let predator_params = {\n//       'pred-init-food': 50,\n//       'pred-m-rate': 4,\n//       'pred-m-age': 50,\n//       'pred-r-age': 10,\n//       'pred-r-food': 20,\n//       'pred-max-food':200\n//     };\n//   let grass_params = {\n//       'grass-rate': 1,\n//       'grass-start': 3,\n//       'grass-max':5,\n//     };\n// //prey hard code controls\n//\n//   const initial_food = document.getElementById('initial-food-slider');\n//   const metabolism = document.getElementById('metabolism-slider');\n//   const max_age = document.getElementById('max-age-slider');\n//   const repro_age = document.getElementById('repro-age-slider');\n//   const repro_food = document.getElementById('repro-food-slider');\n//   const max_food = document.getElementById('max-food-slider');\n//\n//   initial_food.oninput = () => {\n//     outputUpdate('init-food', initial_food.value);}\n//\n//   metabolism.oninput = () => {\n//     outputUpdate('m-rate', metabolism.value);}\n//\n//   max_age.oninput = () => {\n//     outputUpdate('m-age', max_age.value);}\n//\n//   repro_age.oninput = () => {\n//     outputUpdate('r-age', repro_age.value);}\n//\n//   repro_food.oninput = () => {\n//     outputUpdate('r-food', repro_food.value);}\n//\n//   max_food.oninput = () => {\n//     outputUpdate('max-food', max_food.value);}\n//\n//     const outputUpdate = (output_id, val) => {\n//       prey_params[output_id] = val;\n//       document.querySelector(`#${output_id}`).value = val;\n//     }\n//\n//     const pred_initial_food = document.getElementById('pred-initial-food-slider');\n//     const pred_metabolism = document.getElementById('pred-metabolism-slider');\n//     const pred_max_age = document.getElementById('pred-max-age-slider');\n//     const pred_repro_age = document.getElementById('pred-repro-age-slider');\n//     const pred_repro_food = document.getElementById('pred-repro-food-slider');\n//     const pred_max_food = document.getElementById('pred-max-food-slider');\n//\n//\n//     pred_initial_food.oninput = () => {\n//       predOutputUpdate('pred-init-food', pred_initial_food.value);}\n//\n//     pred_metabolism.oninput = () => {\n//       predOutputUpdate('pred-m-rate', pred_metabolism.value);}\n//\n//     pred_max_age.oninput = () => {\n//       predOutputUpdate('pred-m-age', pred_max_age.value);}\n//\n//     pred_repro_age.oninput = () => {\n//       predOutputUpdate('pred-r-age', pred_repro_age.value);}\n//\n//     pred_repro_food.oninput = () => {\n//       predOutputUpdate('pred-r-food', pred_repro_food.value);}\n//\n//     pred_max_food.oninput = () => {\n//       predOutputUpdate('pred-max-food', pred_max_food.value);}\n//\n//   const predOutputUpdate = (output_id, val) => {\n//     predator_params[output_id] = val;\n//     document.querySelector(`#${output_id}`).value = val;}\n//\n//   const grass_rate = document.getElementById('grass-slider');\n//     grass_rate.oninput = () => {\n//       grassUpdate('grass-rate', grass_rate.value);}\n//\n//   const grass_start = document.getElementById('grass-start-slider');\n//     grass_start.oninput = () => {\n//       grassUpdate('grass-start', grass_start.value);}\n//\n//   const grass_max = document.getElementById('grass-max-slider');\n//     grass_max.oninput = () => {\n//       grassUpdate('grass-max', grass_max.value);}\n//\n//   const grassUpdate = (output_id, val) => {\n//     grass_params['output_id'] = val;\n//     document.querySelector(`#${output_id}`).value = val;\n// }\n//\n// const startButton = document.getElementById('start-game');\n// startButton.onclick = () => {\n//   console.log(prey_params, predator_params, grass_params);\n//   board.getParamsStart(prey_params, predator_params, grass_params);\n// }\n// }\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./main.js\n// module id = 0\n// module chunks = 0","const Cell = require('./cell');\nconst Rabbit = require('./rabbit');\nconst Wolf = require('./wolf');\nconst Animal = require('./animal');\n\nclass Board{\n  constructor(frame, ctx, speed, ratio, prey, predator, grass){\n    this.frame = frame;\n    this.ctx = ctx;\n    this.width = 12;\n    this.canvasWidth = 70;\n    this.canvasHeight = 50;\n\n    this.board = this;\n    this.gameOverText = document.querySelector('#game-over');\n\n    this.grid = [];\n    this.nextGrid = [];\n//TESTING\n    this.oneRabbit = null;\n    this.oneWolf = null;\n    this.rabbitId = 0;\n    this.wolfId = 0;\n//TESTING\n\n\n    this.rabbitCount = 0;\n    this.deadRabbits = 0;\n    this.steps = 0;\n    this.birthedRabbits = 0;\n\n    this.wolfCount = 0;\n    this.deadWolves = 0;\n    this.birthedWolves = 0;\n\n    this.totalGrass = 0;\n\n    this.play = false;\n    this.lastTime = 0;\n\n    this.preyParams = prey;\n    this.predatorParams = predator;\n    this.grassParams = grass;\n    this.speed = (1 / parseInt(speed)) * 1000;\n    this.ratio = (1 / (parseInt(ratio)+1))*100;\n\n\n    this.draw = this.draw.bind(this);\n    this.setupGrid = this.setupGrid.bind(this);\n    this.start = this.start.bind(this);\n    this.patch = this.patch.bind(this);\n    this.moveAnimal = this.moveAnimal.bind(this);\n    this.step = this.step.bind(this);\n    this.gameLoop = this.gameLoop.bind(this);\n    this.updateCell = this.updateCell.bind(this);\n    this.toggleGame = this.toggleGame.bind(this);\n    this.transitionBG = this.transitionBG.bind(this);\n    this.updateStats = this.updateStats.bind(this);\n    this.gameOver = this.gameOver.bind(this);\n\n  }\n\nupdateStats(){\n\ndocument.querySelector('.rabbit-count').innerHTML = this.rabbitCount.toString();\ndocument.querySelector('.dead-rabbits').innerHTML = this.deadRabbits.toString();\ndocument.querySelector('.birthed-rabbits').innerHTML = this.birthedRabbits.toString();\n\ndocument.querySelector('.wolf-count').innerHTML = this.wolfCount.toString();\ndocument.querySelector('.dead-wolves').innerHTML = this.deadWolves.toString();\ndocument.querySelector('.birthed-wolves').innerHTML = this.birthedWolves.toString();\n\ndocument.querySelector('.avg-grass').innerHTML = this.avgGrass();\ndocument.querySelector('.step-count').innerHTML = this.steps.toString();\n\nif(this.gameOver()){\n  this.gameOverText.innerHTML = \"All the Animals Are Dead!\";\n    this.toggleGame();\n}\n\n};\n\ngameOver(){\n  return this.rabbitCount == 0 && this.wolfCount == 0;\n};\navgGrass(){\n  return (parseInt(this.totalGrass / (this.canvasWidth * this.canvasHeight))).toString();\n}\n  transitionBG(){\n    let bg_images = this.frame.childNodes;\n\n    if(this.avgGrass() < 3){\n      bg_images[1].className = \"visible\";\n      bg_images[3].className = \"transparent\";\n      bg_images[5].className = \"transparent\";\n    } else if(this.avgGrass() < 5){\n      bg_images[1].className = \"transparent\";\n      bg_images[3].className = \"visible\";\n      bg_images[5].className = \"transparent\";\n    } else {\n      bg_images[1].className = \"transparent\";\n      bg_images[3].className = \"transparent\";\n      bg_images[5].className = \"visible\";\n    }\n  }\n\n  patch(x,y){\n    return this.grid[x][y];\n  }\n\n  start(){\n    this.setupGrid();\n    this.draw();\n  }\n  setupGrid(){\n    for(let x=0; x < this.canvasWidth; x++){\n      this.grid[x] = [];\n      this.nextGrid[x] =  [];\n      for( let y = 0; y< this.canvasHeight; y++ ){\n        this.grid[x][y] = [];\n        this.nextGrid[x][y] = new Cell(this.grassParams, this.board, x,y, \"grass\");\n\n  //EDIT\n\n        let rand = Math.random()*1000;\n\n        if(rand > (1000 - this.ratio)){\n          this.grid[x][y] = new Cell(this.grassParams, this.board, x,y);\n          this.grid[x][y].addNewWolf(this.predatorParams, this.rabbitId);\n          this.rabbitId ++;\n        } else if(rand > 900 ){\n          this.grid[x][y] = new Cell(this.grassParams, this.board, x,y);\n          this.grid[x][y].addNewRabbit(this.preyParams, this.wolfId);\n          this.wolfId ++;\n        } else {\n          this.grid[x][y] = new Cell(this.grassParams, this.board, x,y, \"grass\");\n        }\n      }\n    }\n  }\n\n  draw(){\n    let ctx = this.ctx;\n    let gridSquareWidth = this.width;\n    let grassColor = \"#009900\";\n    let start_x = 30;\n    let rad = 5;\n    let wolfrad = 6;\n    let gaps = this.width;\n    for (let x =0; x < this.canvasWidth; x++) {\n  \t\tfor (let y = 0; y < this.canvasHeight; y++) {\n        let patch = this.patch(x,y);\n        this.totalGrass += patch.grassLevel;\n\n          switch(patch.grassLevel){\n            case 0:\n            grassColor = \"#D5CBB8\";\n            break;\n            case 1:\n            grassColor = \"#C9DAAB\";\n            break;\n            case 2:\n            grassColor = \"#C2D6A1\";\n            break;\n            case 3:\n            grassColor = \"#91B454\";\n            break;\n            case 4:\n            grassColor = \"#6E8B3D\";\n            break;\n            case 5:\n            grassColor = \"#556B2F\";\n            break;\n            default:\n            grassColor = \"#556B2F\";\n          }\n          ctx.fillStyle = grassColor;\n          ctx.fillRect(x * gridSquareWidth, y * gridSquareWidth, gridSquareWidth, gridSquareWidth);\n\n\n        if (patch.type == \"rabbit\") {\n\n          this.rabbitCount ++;\n          ctx.fillStyle = \"#ee66aa\";\n//TESTING\n          // if(patch.animal.id == 1){\n          //   ctx.fillStyle =\"#FFFF00\";\n          // }\n          ctx.beginPath();\n          ctx.arc(rad+gaps*x,rad+ gaps*y, rad, 0, Math.PI*2, true);\n          ctx.closePath();\n          ctx.fill();\n\n          // ctx.fillRect(x * gridSquareWidth, y * gridSquareWidth, gridSquareWidth, gridSquareWidth);\n        } else if (patch.type == \"wolf\"){\n          this.wolfCount ++;\n          ctx.fillStyle = \"#383838\";\n//TESTING\n      // if(patch.animal.id == 1){\n      //     ctx.fillStyle =\"#FF0000\";\n      //       }\n          ctx.beginPath();\n          ctx.arc(wolfrad+gaps*x,wolfrad+ gaps*y, wolfrad, 0, Math.PI*2, true);\n          ctx.closePath();\n          ctx.fill();\n          // ctx.fillRect(x * gridSquareWidth, y * gridSquareWidth, gridSquareWidth, gridSquareWidth);\n        }\n  \t\t}\n  \t}\n\n    this.transitionBG();\n    //TESTING\n    // console.log(\"one rabbit\", this.oneRabbit);\n    // console.log(\"one wolf\", this.oneWolf);\n    this.updateStats();\n\n  }\n\n  moveAnimal(x,y, animal){\n    let cell = this.nextGrid[x][y];\n    cell.addAnimal(animal);\n  }\n  //updates grid with newGrid\n\n  updateCell(x,y){\n     let updatedCell = this.grid[x][y].updateGrass();\n     let nextGridCell = this.nextGrid[x][y];\n     nextGridCell.grassLevel = updatedCell.grassLevel;\n  }\n\n  step(){\n    for( let x = 0; x < this.canvasWidth; x++){\n      for( let y = 0; y < this.canvasHeight; y++){\n        this.updateCell(x,y);\n        let animal = this.grid[x][y].previousAnimal;\n\n\n\n\n        if(animal instanceof Animal && animal.alive){\n          if(animal instanceof Rabbit){\n            if(animal.id == 1){\n              this.oneRabbit = animal;\n            }\n            let availableSpaces = animal.availableSpaces();\n\n            for(let i = 0; i < availableSpaces.length ; i++){\n              let newCoords = availableSpaces[i]\n              let newX = newCoords[0];\n              let newY = newCoords[1];\n              let newCell = this.nextGrid[newX][newY];\n              if(newCell.animal == null){\n                newCell.addAnimal(animal);\n                break;\n              }\n            }\n          } else if(animal instanceof Wolf){\n            if(animal.id == 1){\n              this.oneWolf = animal;\n            }\n            let newCoords = animal.randomNeighbor();\n            let newX = newCoords[0];\n            let newY = newCoords[1];\n            let newCell = this.nextGrid[newCoords[0]][newCoords[1]];\n          // debugger\n          newCell.addAnimal(animal);\n          }\n\n          if(animal.shouldReproduce()){\n\n\n            let currentCell = this.nextGrid[x][y];\n            if(animal instanceof Rabbit){\n              currentCell.addNewRabbit(this.preyParams);\n              this.birthedRabbits ++;\n            } else {\n\n              currentCell.addNewWolf(this.predatorParams);\n              this.birthedWolves ++;\n            }\n\n          }\n        } else if(animal instanceof Animal && !animal.alive){\n          if(animal instanceof Rabbit){\n            this.deadRabbits ++;\n          } else if(animal instanceof Wolf){\n            this.deadWolves ++;\n          }\n\n        }\n        // }\n\n        }\n      }\n\n\n\n    this.grid = this.nextGrid;\n    this.rabbitCount = 0;\n    this.wolfCount = 0;\n    this.totalGrass = 0;\n    this.steps ++;\n\n    this.draw();\n  }\n\n  gameLoop(){\n    if(this.play){\n      let now = Date.now();\n      let dt = (now - this.lastTime) / 1000.0;\n\n      this.step(dt);\n\n      this.lastTime = now;\n  \twindow.setTimeout(this.gameLoop, this.speed);\n  }}\n\n  toggleGame(){\n    this.play = !this.play;\n    if(this.play){\n      this.gameOverText.className=\"invisible\";\n      this.gameLoop();\n    } else{\n      this.gameOverText.className=\"\";\n    }\n  }\n}\n\nmodule.exports = Board;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/board.js\n// module id = 1\n// module chunks = 0","const Board = require('./board');\n\nclass Control{\n  constructor(frame, ctx){\n    this.frame = frame;\n    this.ctx = ctx;\n    this.board = null;\n    this.prey = {\n      'init-food': 1,\n        'm-rate': 2,\n        'm-age': 17,\n        'r-age': 5,\n        'r-food': 25,\n        'max-food':25\n      };\n    this.predator = {\n          'init-food': 50,\n          'm-rate': 4,\n          'm-age': 50,\n          'r-age': 10,\n          'r-food': 20,\n          'max-food':200\n        };\n    this.grass = {\n      'grass-rate': 1,\n      'grass-start': 3,\n      'grass-max':5\n    };\n\n\n    this.speed = 20;\n    this.ratio = 5;\n\n\n    this.createControls = this.createControls.bind(this);\n    this.sendParams = this.sendParams.bind(this);\n    this.toggleGame = this.toggleGame.bind(this);\n    this.step = this.step.bind(this);\n  }\n\n  sendParams(){\n\n    let board = new Board(this.frame, this.ctx, this.speed, this.ratio, this.prey, this.predator, this.grass);\n\n    this.board = board;\n    this.board.start();\n  }\n\n  toggleGame(){\n    if(this.board !== null){\n        this.board.toggleGame();\n      }\n  }\n  step(){\n    if(this.board !== null){\n      this.board.step();\n    }\n  }\n\n  createControls(){\n    this.sendParams();\n  //prey hard code controls\n  // debugger\n      const initial_food = document.getElementById('initial-food-slider');\n      const metabolism = document.getElementById('metabolism-slider');\n      const max_age = document.getElementById('max-age-slider');\n      const repro_age = document.getElementById('repro-age-slider');\n      const repro_food = document.getElementById('repro-food-slider');\n      const max_food = document.getElementById('max-food-slider');\n\n      initial_food.oninput = () => {\n        outputUpdate('init-food', initial_food.value);};\n\n      metabolism.oninput = () => {\n        outputUpdate('m-rate', metabolism.value);};\n\n      max_age.oninput = () => {\n        outputUpdate('m-age', max_age.value);};\n\n      repro_age.oninput = () => {\n        outputUpdate('r-age', repro_age.value);};\n\n      repro_food.oninput = () => {\n        outputUpdate('r-food', repro_food.value);};\n\n      max_food.oninput = () => {\n        outputUpdate('max-food', max_food.value);};\n\n        const outputUpdate = (output_id, val) => {\n          this.prey[output_id] = val;\n          document.querySelector(`#${output_id}`).value = val;\n        };\n\n        const pred_initial_food = document.getElementById('pred-initial-food-slider');\n        const pred_metabolism = document.getElementById('pred-metabolism-slider');\n        const pred_max_age = document.getElementById('pred-max-age-slider');\n        const pred_repro_age = document.getElementById('pred-repro-age-slider');\n        const pred_repro_food = document.getElementById('pred-repro-food-slider');\n        const pred_max_food = document.getElementById('pred-max-food-slider');\n\n\n        pred_initial_food.oninput = () => {\n          predOutputUpdate('init-food', pred_initial_food.value);};\n\n        pred_metabolism.oninput = () => {\n          predOutputUpdate('m-rate', pred_metabolism.value);};\n\n        pred_max_age.oninput = () => {\n          predOutputUpdate('m-age', pred_max_age.value);};\n\n        pred_repro_age.oninput = () => {\n          predOutputUpdate('r-age', pred_repro_age.value);};\n\n        pred_repro_food.oninput = () => {\n          predOutputUpdate('r-food', pred_repro_food.value);};\n\n        pred_max_food.oninput = () => {\n          predOutputUpdate('max-food', pred_max_food.value);};\n\n      const predOutputUpdate = (output_id, val) => {\n        this.predator[output_id] = val;\n        document.querySelector(`#pred-${output_id}`).value = val;};\n\n      const grass_rate = document.getElementById('grass-slider');\n        grass_rate.oninput = () => {\n          grassUpdate('grass-rate', grass_rate.value);};\n\n      const grass_start = document.getElementById('grass-start-slider');\n        grass_start.oninput = () => {\n          grassUpdate('grass-start', grass_start.value);};\n\n      const grass_max = document.getElementById('grass-max-slider');\n        grass_max.oninput = () => {\n          grassUpdate('grass-max', grass_max.value);};\n\n      const grassUpdate = (output_id, val) => {\n        this.grass[output_id] = val;\n        document.querySelector(`#${output_id}`).value = val;\n    };\n\n    const setParams = document.getElementById('set-game');\n    setParams.onclick = () => {\n      this.sendParams(this.prey, this.predator, this.grass);\n    };\n    const stepGame = document.getElementById('step-game');\n    stepGame.onclick = () => {\n      this.step();\n    };\n\n    const speedCounter = document.getElementById('speed-slider');\n      speedCounter.oninput = () => {\n        this.speed = speedCounter.value;\n        document.querySelector(`#speed-output`).value = speedCounter.value;\n\n    };\n    const populationRatio = document.getElementById('population-ratio-slider');\n      populationRatio.oninput = () => {\n        this.ratio = populationRatio.value;\n        document.querySelector(`#ratio`).value = populationRatio.value;\n\n    };\n\n\n  }\n\n\n}\n\nmodule.exports = Control;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/control.js\n// module id = 2\n// module chunks = 0","const Rabbit = require('./rabbit');\nconst Wolf = require('./wolf');\nconst Animal = require('./animal.js');\n\nconst default_params = {\n  'grass-rate': 1,\n  'grass-start': 3,\n  'grass-max':5\n};\nclass Cell {\n  constructor(params=default_params, board, x, y){\n\n    this.type = \"grass\";\n    this.currentX = x;\n    this.currentY = y;\n    this.grassLevel = parseInt(params['grass-start']);\n    this.grassGrowRate = parseInt(params['grass-rate']);\n    this.grassMax = parseInt(params['grass-max'])\n    // this.animal = animal;\n    this.board = board;\n    this.animal = null;\n    this.cell = this;\n    this.previousAnimal = null;\n    // if(animal !== null){\n    //   this.type = animal.name;\n    // }\n\n    this.updateGrass = this.updateGrass.bind(this);\n    this.addAnimal = this.addAnimal.bind(this);\n    this.neighbors = this.neighbors.bind(this);\n    this.addNewRabbit = this.addNewRabbit.bind(this);\n    this.addNewWolf = this.addNewWolf.bind(this);\n    this.eatGrass = this.eatGrass.bind(this);\n    this.empty = this.empty.bind(this);\n  }\nempty(){\n  this.animal = null;\n  this.type = \"grass\";\n}\nneighbors(){\n  let neighbors = [];\n  let x = this.currentX;\n  let y = this.currentY;\n  const spots = [\n    [x-1 , y-1],\n    [x-1 , y],\n    [x-1 , y + 1 ],\n    [x, y - 1],\n    [x, y + 1],\n    [x + 1 , y - 1],\n    [x + 1 , y ],\n    [x + 1 , y + 1]\n  ];\n  spots.forEach((coord) => {\n    // let a = coord[0] % this.board.canvasWidth;\n    // let b = coord[1] % this.board.canvasHeight;\n\n    let a = coord[0];\n    let b = coord[1];\n\n    if(a >= this.board.canvasWidth){\n      a = a - this.board.canvasWidth;\n    }\n\n    if( b >= this.board.canvasHeight){\n      b = b - this.board.canvasHeight;\n    }\n    if(a < 0){\n      a = this.board.canvasWidth + a;\n    }\n    if(\n        b < 0){\n          b = this.board.canvasHeight + b;\n        }\n    neighbors.push(this.board.grid[a][b]);\n\n  });\n  return neighbors;\n  }\n\n  //\n  // if(coord[0] >= 0 && coord[1] >= 0 ){\n  // let a = coord[0] % this.board.canvasWidth;\n  // let b = coord[1] % this.board.canvasHeight;\n  // neighbors.push(this.board.grid[a][b]);\n  // }\n\n\n\naddAnimal(animal){\n  this.animal = animal;\n  this.type = animal.name;\n  this.animal.updateCell(this.cell);\n}\n//TESTING\naddNewRabbit(params, id){\n  this.animal = new Rabbit(this.cell, params, id);\n  this.type = \"rabbit\";\n  this.rabbitId ++;\n}\n//TESTING\naddNewWolf(params, id){\n  this.animal = new Wolf(this.cell, params, id);\n  this.type = \"wolf\";\n  this.wolfId ++;\n}\n\neatGrass(amt){\n  this.grassLevel -= amt;\n}\n\nupdateGrass(){\n//decreases grass level if there is a rabbit\n    if(this.animal instanceof Animal){\n      this.animal.mortality();}\n\n      if(this.type === \"rabbit\"){\n        this.animal.eat();\n      }\n        else if(this.grassLevel < this.grassMax){\n      this.grassLevel += this.grassGrowRate;\n    }\n\n    if(this.grassLevel < 0) {\n      this.grassLevel = 0;\n    }\n\n    if(this.grassLevel > 5) {\n      this.grassLevel = 5;\n    }\n    this.previousAnimal = this.animal;\n    this.animal = null;\n    this.type = \"grass\";\n    return this.cell;\n  }\n\n\n\n\n}\n\nmodule.exports = Cell;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/cell.js\n// module id = 3\n// module chunks = 0","const Animal = require('./animal.js');\n\nconst default_prey_params = {\n  'init-food': 1,\n    'm-rate': 2,\n    'm-age': 17,\n    'r-age': 5,\n    'r-food': 25,\n    'max-food':45\n  };\n\nclass Rabbit extends Animal{\n  constructor(cell, params=default_prey_params, id){\n    super(cell, params, id);\n    this.age = 0;\n    this.alive = true;\n    this.name = \"rabbit\";\n\n\n    // this.maxFood = params['max-food'];\n    // this.metabolicRate = params['m-rate'];\n    // this.maxAge = 17;\n    // this.reproductiveAge = 5;\n    // this.reproductiveFoodRequirement = 25;\n\n    // this.currentX = x;\n    // this.currentY = y;\n    this.cell = cell;\n\n\n    this.eat = this.eat.bind(this);\n    this.availableSpaces = this.availableSpaces.bind(this);\n    // this.randomNeighbor = this.randomNeighbor.bind(this);\n    this.mortality = this.mortality.bind(this);\n    this.shouldReproduce = this.shouldReproduce.bind(this);\n  }\n  newCell(cell){\n    this.cell = cell;\n  }\n\n\n  eat(){\n\n    let neededFood = this.maxFood - this.food;\n    if(this.cell.grassLevel < neededFood){\n    this.food += this.cell.grassLevel;\n    this.cell.eatGrass(this.cell.grassLevel);\n    this.food -= this.metabolicRate;\n  } else{\n    this.food += neededFood;\n    this.cell.eatGrass(neededFood);\n    this.food -= this.metabolicRate;\n  }\n\n  }\n\n\n\n  mortality(){\n    this.age ++;\n    if(this.age > this.maxAge || this.food < 1){\n      this.kill();\n    }\n\n  //change parameters for reproduction\n    // if(this.age > this.metabolicRate && (Math.random()*10) > 9 ){\n    //   this.move(new Rabbit()));\n    // }\n\n  }\n\n  availableSpaces(){\n\n    let spaces = [];\n\n    let neighbors = this.cell.neighbors();\n    for(let g = 5; g > 0; g --){\n      if(spaces.length > 0){\n        break;\n      } else {\n        neighbors.forEach((neighbor) => {\n// TEST\n          if(neighbor.type === \"grass\" && neighbor.grassLevel === g){\n            spaces.push([neighbor.currentX, neighbor.currentY]);\n          }\n        });\n      }\n    }\n\n      spaces = this.shuffle(spaces);\n\n      spaces.push([this.cell.currentX, this.cell.currentY]);\n\n    return spaces;\n  }\n\n  // randomNeighbor(){\n  //\n  //  let openSpaces = this.openSpaces();\n  //  let idx = Math.floor(Math.random() * openSpaces.length);\n  //  let result = [this.cell.currentX, this.cell.currentY];\n  //  if(openSpaces[idx] !== undefined){\n  //    result = [openSpaces[idx][0], openSpaces[idx][1]];\n  // }\n  //   return result;\n  // }\n\n  shouldReproduce(){\n  return this.age > this.reproductiveAge && this.food > this.reproductiveFoodRequirement\n\n  }\n    }\n\nmodule.exports = Rabbit;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/rabbit.js\n// module id = 4\n// module chunks = 0","class Animal{\n  constructor(cell, params, id=200){\n    this.cell = cell;\n\n//TESTING\n    this.id = id;\n    this.maxFood = params['max-food'];\n    this.metabolicRate = params['m-rate'];\n    this.maxAge = params['m-age'];\n    this.reproductiveAge = params['r-age'];\n    this.reproductiveFoodRequirement = params['r-food'];\n    this.food = params['init-food'];\n\n\n    this.alive = true;\n    this.updateCell = this.updateCell.bind(this);\n    this.kill = this.kill.bind(this);\n    this.shuffle = this.shuffle.bind(this);\n  }\n\nupdateCell(cell){\n  this.cell = cell;\n}\nkill(){\n  this.alive = false;\n}\n\nshuffle(a) {\n    for (let i = a.length; i; i--) {\n        let j = Math.floor(Math.random() * i);\n        [a[i - 1], a[j]] = [a[j], a[i - 1]];\n    }\n    return a;\n}\n\n\n}\n\nmodule.exports = Animal;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/animal.js\n// module id = 5\n// module chunks = 0","const Animal = require('./animal.js');\n\nconst default_predator_params = {\n        'init-food': 50,\n        'm-rate': 4,\n        'm-age': 50,\n        'r-age': 10,\n        'r-food': 20,\n        'max-food':200\n      };\n\nclass Wolf extends Animal{\nconstructor(cell, params=default_predator_params, id){\n  super(cell, params, id);\n  this.age = 0;\n  this.name = \"wolf\";\n  this.alive = true;\n\n\n\n\n  this.randomNeighbor = this.randomNeighbor.bind(this);\n  this.availableSpaces = this.availableSpaces.bind(this);\n  this.eat = this.eat.bind(this);\n  this.shouldReproduce = this.shouldReproduce.bind(this);\n  this.mortality = this.mortality.bind(this);\n}\n\n\n\nmortality(){\n  this.age ++;\n  this.food -= this.metabolicRate;\n  if(this.age > this.maxAge || this.food < 1){\n    this.kill();\n  }\n\n}\navailableSpaces(){\n  let neighbors = this.cell.neighbors();\n\n  let rabbitSpaces = [];\n  let emptySpaces = [];\n\n  //TESTING\n\n\n    neighbors.forEach((neighbor) => {\n\n    if(neighbor.type == \"rabbit\"){\n      rabbitSpaces.push(neighbor);\n    } else if(neighbor.type == \"grass\"){\n      emptySpaces.push(neighbor);\n    }\n  });\n  if(rabbitSpaces.length > 0){\n  emptySpaces = rabbitSpaces;\n  }\n  return emptySpaces;\n}\n\nrandomNeighbor(){\n\n let openSpaces = this.availableSpaces();\n let idx = Math.floor(Math.random() * openSpaces.length);\n let result = [this.cell.currentX, this.cell.currentY];\n if(openSpaces[idx] !== undefined){\n  //  debugger\n   let neighbor = openSpaces[idx];\n   this.eat(neighbor.animal);\n   result = [neighbor.currentX, neighbor.currentY];\n}\n  return result;\n}\n\neat(rabbit){\n  if(rabbit !== null){\n    if(this.food < this.maxFood){\n      this.food += rabbit.food;\n      rabbit.kill();\n    }\n  }\n\n}\n\nshouldReproduce(){\n  return this.age > this.reproductiveAge && this.food > this.reproductiveFoodRequirement\n}\n\n}\n\nmodule.exports = Wolf;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/wolf.js\n// module id = 6\n// module chunks = 0"],"sourceRoot":""}