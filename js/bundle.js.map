{"version":3,"sources":["webpack:///webpack/bootstrap 4d19d66fce0f86e8f1da","webpack:///./main.js","webpack:///./js/board.js","webpack:///./js/cell.js","webpack:///./js/rabbit.js","webpack:///./js/animal.js","webpack:///./js/wolf.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;;;;;;ACnBL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB,sBAAsB;AACtC;AACA;AACA,sBAAqB,sBAAsB;AAC3C;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAkB,sBAAsB;AACxC,oBAAmB,uBAAuB;AAC1C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAmB,sBAAsB;AACzC,sBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;;AAEA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACnQA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;;;;;;AClHA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA,mBAAkB,OAAO;AACzB;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;;;;;;ACnGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AChBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,MAAK;AACL;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA","file":"./js/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 4d19d66fce0f86e8f1da","const Board = require('./js/board');\n\n\ndocument.addEventListener(\"DOMContentLoaded\", function(){\n  const canvas = document.getElementById('gameCanvas');\n  const ctx = canvas.getContext('2d');\n  const frame = document.getElementById('frame');\n  canvas.width = 10 * 70;\n  // 10 * 50;\n  canvas.height = 10* 50;\n  frame.style.width = 1400;\n  frame.style.height = 700;\n  canvas.style.width = canvas.width;\n  canvas.style.height = canvas.height;\n  let board = new Board(frame, ctx);\n  board.start();\n  canvas.onclick = function fun() {\n        board.toggleGame();\n      };\n    });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./main.js\n// module id = 0\n// module chunks = 0","const Cell = require('./cell');\nconst Rabbit = require('./rabbit');\nconst Wolf = require('./wolf');\nconst Animal = require('./animal');\n\nclass Board{\n  constructor(frame, ctx){\n    this.frame = frame;\n    this.ctx = ctx;\n    this.width = 10;\n    this.canvasWidth = 70;\n    this.canvasHeight = 50;\n\n    this.board = this;\n\n    this.grid = [];\n    this.nextGrid = [];\n\n\n    this.rabbitCount = 0;\n    this.deadRabbits = 0;\n    this.steps = 0;\n    this.birthedRabbits = 0;\n\n    this.play = false;\n    this.lastTime = 0;\n\n    this.draw = this.draw.bind(this);\n    this.setupGrid = this.setupGrid.bind(this);\n    this.start = this.start.bind(this);\n    this.patch = this.patch.bind(this);\n    this.moveAnimal = this.moveAnimal.bind(this);\n    this.step = this.step.bind(this);\n    this.gameLoop = this.gameLoop.bind(this);\n    this.updateCell = this.updateCell.bind(this);\n    this.toggleGame = this.toggleGame.bind(this);\n    this.transitionBG = this.transitionBG.bind(this);\n\n  }\n\n  transitionBackground(){\n    if(this.steps > 60){\n      this.frame.style.backgroundImage = \"url('http://res.cloudinary.com/indiemomo/image/upload/c_fill,h_400,w_800/v1485406390/other/overgrazed2.jpg')\";\n    } else if(this.steps > 30){\n      this.frame.style.backgroundImage = \"url('http://res.cloudinary.com/indiemomo/image/upload/c_fill,h_400,w_800/v1485406391/other/dying_forest.jpg')\";\n    }\n    else {\n      this.frame.style.backgroundImage = \"url('http://res.cloudinary.com/indiemomo/image/upload/c_fill,h_400,w_800/v1485406391/other/forest-07.jpg')\";\n    }\n    this.frame.style.backgroundSize=\"cover\";\n  }\n\n  transitionBG(){\n    let bg_images = this.frame.childNodes;\n\n    if(this.rabbitCount > 300){\n      bg_images[1].className = \"visible\";\n      bg_images[3].className = \"transparent\";\n      bg_images[5].className = \"transparent\";\n      bg_images[7].className = \"transparent\";\n    } else if(this.rabbitCount > 200){\n      bg_images[1].className = \"transparent\";\n      bg_images[3].className = \"visible\";\n      bg_images[5].className = \"transparent\";\n      bg_images[7].className = \"transparent\";\n    } else if(this.rabbitCount > 10){\n      bg_images[1].className = \"transparent\";\n      bg_images[3].className = \"transparent\";\n      bg_images[5].className = \"visible\";\n      bg_images[7].className = \"transparent\";\n    } else {\n      bg_images[1].className = \"transparent\";\n      bg_images[3].className = \"transparent\";\n      bg_images[5].className = \"transparent\";\n      bg_images[7].className = \"visible\";\n    }\n  }\n\n  patch(x,y){\n    return this.grid[x][y];\n  }\n\n  start(){\n    this.setupGrid();\n    this.draw();\n    console.log(this.grid);\n  }\n  setupGrid(){\n    for(let x=0; x < this.canvasWidth; x++){\n      this.grid[x] = [];\n      this.nextGrid[x] =  [];\n      for( let y = 0; y< this.canvasHeight; y++ ){\n        this.grid[x][y] = [];\n        this.nextGrid[x][y] = new Cell(this.board, x,y, \"grass\");\n\n  //EDIT\n\n        let rand = Math.random()*100;\n        if(rand > 98){\n          this.grid[x][y] = new Cell(this.board, x,y);\n          this.grid[x][y].addNewWolf();\n        } else if(rand > 90 ){\n          this.grid[x][y] = new Cell(this.board, x,y);\n          this.grid[x][y].addNewRabbit();\n        } else {\n          this.grid[x][y] = new Cell(this.board, x,y, \"grass\");\n        }\n      }\n    }\n  }\n\n  draw(){\n\n    let ctx = this.ctx;\n    let gridSquareWidth = this.width;\n    let grassColor = \"#009900\";\n    let start_x = 30;\n    let rad = 5;\n    let gaps = rad * 2;\n    for (let x =0; x < this.canvasWidth; x++) {\n  \t\tfor (let y = 0; y < this.canvasHeight; y++) {\n        let patch = this.patch(x,y);\n\n          switch(patch.grassLevel){\n            case 0:\n            grassColor = \"#D5CBB8\";\n            break;\n            case 1:\n            grassColor = \"#C9DAAB\";\n            break;\n            case 2:\n            grassColor = \"#C2D6A1\";\n            break;\n            case 3:\n            grassColor = \"#91B454\";\n            break;\n            case 4:\n            grassColor = \"#6E8B3D\";\n            break;\n            case 5:\n            grassColor = \"#556B2F\";\n            break;\n            default:\n            grassColor = \"#556B2F\";\n          }\n          ctx.fillStyle = grassColor;\n          ctx.fillRect(x * gridSquareWidth, y * gridSquareWidth, gridSquareWidth, gridSquareWidth);\n\n\n        if (patch.type == \"rabbit\") {\n          this.rabbitCount ++;\n          ctx.fillStyle = \"#ee66aa\";\n          ctx.beginPath();\n          ctx.arc(rad+gaps*x,rad+ gaps*y, rad, 0, Math.PI*2, true);\n          ctx.closePath();\n          ctx.fill();\n\n          // ctx.fillRect(x * gridSquareWidth, y * gridSquareWidth, gridSquareWidth, gridSquareWidth);\n        } else if (patch.type == \"wolf\"){\n          ctx.fillStyle = \"#383838\";\n          ctx.beginPath();\n          ctx.arc(rad+gaps*x,rad+ gaps*y, rad, 0, Math.PI*2, true);\n          ctx.closePath();\n          ctx.fill();\n          // ctx.fillRect(x * gridSquareWidth, y * gridSquareWidth, gridSquareWidth, gridSquareWidth);\n        }\n  \t\t}\n  \t}\n\n    this.transitionBG();\n\n    console.log(\"rabbit count\", this.rabbitCount);\n    console.log(\"dead rabbits\", this.deadRabbits);\n    console.log(\"birthed rabbits\", this.birthedRabbits);\n    console.log(\"steps\", this.steps);\n  }\n\n  moveAnimal(x,y, animal){\n    let cell = this.nextGrid[x][y];\n    cell.addAnimal(animal);\n  }\n  //updates grid with newGrid\n\n  updateCell(x,y){\n     let updatedCell = this.grid[x][y].updateGrass();\n     let nextGridCell = this.nextGrid[x][y];\n     nextGridCell.grassLevel = updatedCell.grassLevel;\n  }\n\n  step(){\n    for( let x = 0; x < this.canvasWidth; x++){\n      for( let y = 0; y < this.canvasHeight; y++){\n        this.updateCell(x,y);\n        let animal = this.grid[x][y].previousAnimal;\n        if(animal instanceof Animal && animal.alive){\n          if(animal instanceof Wolf){\n            // debugger\n          }\n        let newCoords = animal.randomNeighbor();\n        let newX = newCoords[0];\n        let newY = newCoords[1];\n\n\n\n          let newCell = this.nextGrid[newCoords[0]][newCoords[1]];\n          // debugger\n          newCell.addAnimal(animal);\n\n          if(animal.shouldReproduce()){\n\n\n            let currentCell = this.nextGrid[x][y];\n            if(animal instanceof Rabbit){\n              currentCell.addNewRabbit();\n              this.birthedRabbits ++;\n            } else{\n              currentCell.addNewWolf();\n            }\n\n          }\n        } else if(animal instanceof Rabbit && !animal.alive){\n          this.deadRabbits ++;\n        }\n        // }\n\n        }\n      }\n    if(this.rabbitCount < 8){\n      console.log(\"next grid\", this.nextGrid);\n\n    }\n\n\n    this.grid = this.nextGrid;\n    this.rabbitCount = 0;\n    this.steps ++;\n\n    this.draw();\n  }\n\n  gameLoop(){\n    if(this.play){\n      let now = Date.now();\n      let dt = (now - this.lastTime) / 1000.0;\n\n      this.step(dt);\n\n      this.lastTime = now;\n  \twindow.setTimeout(this.gameLoop, 200);\n  }}\n\n  toggleGame(){\n    this.play = !this.play;\n    if(this.play){\n      this.gameLoop();\n    }\n  }\n}\n\nmodule.exports = Board;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/board.js\n// module id = 1\n// module chunks = 0","const Rabbit = require('./rabbit');\nconst Wolf = require('./wolf');\nconst Animal = require('./animal.js');\n\n\nclass Cell {\n  constructor(board, x, y){\n    this.type = \"grass\";\n    this.currentX = x;\n    this.currentY = y;\n    this.grassLevel = 4;\n    // this.animal = animal;\n    this.board = board;\n    this.animal = null;\n    this.cell = this;\n    this.previousAnimal = null;\n    // if(animal !== null){\n    //   this.type = animal.name;\n    // }\n\n\n    this.updateGrass = this.updateGrass.bind(this);\n    this.addAnimal = this.addAnimal.bind(this);\n    this.neighbors = this.neighbors.bind(this);\n    this.addNewRabbit = this.addNewRabbit.bind(this);\n    this.addNewWolf = this.addNewWolf.bind(this);\n    this.moveAnimal = this.moveAnimal.bind(this);\n    this.eatGrass = this.eatGrass.bind(this);\n    this.empty = this.empty.bind(this);\n  }\nempty(){\n  this.animal = null;\n  this.type = \"grass\";\n}\nneighbors(){\n  let neighbors = [];\n  let x = this.currentX;\n  let y = this.currentY;\n  const spots = [\n    [x-1 , y-1],\n    [x-1 , y],\n    [x-1 , y + 1 ],\n    [x, y - 1],\n    [x, y + 1],\n    [x + 1 , y - 1],\n    [x + 1 , y ],\n    [x + 1 , y + 1]\n  ];\n  spots.forEach((coord) => {\n    if(coord[0] >= 0 && coord[1] >= 0 ){\n    let a = coord[0] % this.board.canvasWidth;\n    let b = coord[1] % this.board.canvasHeight;\n    neighbors.push(this.board.grid[a][b]);\n    }\n  });\n  return neighbors;\n  }\n\naddAnimal(animal){\n  this.animal = animal;\n  this.type = animal.name;\n  this.animal.updateCell(this.cell);\n}\n\naddNewRabbit(){\n  this.animal = new Rabbit(this.cell);\n  this.type = \"rabbit\";\n}\n\naddNewWolf(){\n  this.animal = new Wolf(this.cell);\n  this.type = \"wolf\";\n}\n\neatGrass(amt){\n  this.grassLevel -= amt;\n}\n\nupdateGrass(){\n//decreases grass level if there is a rabbit\n    if(this.animal instanceof Animal){\n      this.animal.mortality();}\n\n      if(this.type === \"rabbit\"){\n        this.animal.eat();\n      }\n        else if(this.grassLevel < 5){\n      this.grassLevel ++;\n    }\n\n    if(this.grassLevel < 0) {\n      this.grassLevel = 0;\n    }\n\n    if(this.grassLevel > 5) {\n      this.grassLevel = 5;\n    }\n    this.previousAnimal = this.animal;\n    this.animal = null;\n    this.type = \"grass\";\n    return this.cell;\n  }\n\n\nmoveAnimal(){\n  console.log(\"in move animal\");\n  if(this.type === \"rabbit\"){\n\n  return this.animal.move();\n  }\n}\n\n}\n\nmodule.exports = Cell;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/cell.js\n// module id = 2\n// module chunks = 0","const Animal = require('./animal.js');\n\nclass Rabbit extends Animal{\n  constructor(cell){\n    super(cell);\n    this.food = 1;\n    this.age = 0;\n    this.alive = true;\n    this.name = \"rabbit\";\n\n    this.maxFood = 45;\n    this.metabolicRate = 2;\n    this.maxAge = 17;\n    this.reproductiveAge = 5;\n    this.reproductiveFoodRequirement = 25;\n\n    // this.currentX = x;\n    // this.currentY = y;\n    this.cell = cell;\n\n\n    this.eat = this.eat.bind(this);\n    this.openSpaces = this.openSpaces.bind(this);\n    this.randomNeighbor = this.randomNeighbor.bind(this);\n    this.mortality = this.mortality.bind(this);\n    this.shouldReproduce = this.shouldReproduce.bind(this);\n  }\n  newCell(cell){\n    this.cell = cell;\n  }\n\n\n  eat(){\n    console.log(\"in eat\");\n    let neededFood = this.maxFood - this.food;\n    if(this.cell.grassLevel < neededFood){\n    this.food += this.cell.grassLevel;\n    this.cell.eatGrass(this.cell.grassLevel);\n    this.food -= this.metabolicRate;\n  } else{\n    this.food += neededFood;\n    this.cell.eatGrass(neededFood);\n    this.food -= this.metabolicRate;\n  }\n\n  }\n\n\n\n  mortality(){\n    this.age ++;\n    if(this.age > this.maxAge || this.food < 1){\n      this.kill();\n    }\n\n  //change parameters for reproduction\n    // if(this.age > this.metabolicRate && (Math.random()*10) > 9 ){\n    //   this.move(new Rabbit()));\n    // }\n\n  }\n\n  openSpaces(){\n\n    let spaces = [];\n    // debugger\n    let neighbors = this.cell.neighbors();\n\n    for(let g = 5; g > 0; g --){\n      if(spaces.length > 0){\n        return spaces;\n      } else {\n        neighbors.forEach((neighbor) => {\n          if(neighbor.type === \"grass\" && neighbor.grassLevel === g){\n            spaces.push([neighbor.currentX, neighbor.currentY]);\n          }\n        });\n      }\n    }\n    return spaces;\n  }\n\n  randomNeighbor(){\n\n   let openSpaces = this.openSpaces();\n   let idx = Math.floor(Math.random() * openSpaces.length);\n   let result = [this.cell.currentX, this.cell.currentY];\n   if(openSpaces[idx] !== undefined){\n     result = [openSpaces[idx][0], openSpaces[idx][1]];\n  }\n    return result;\n  }\n\n  shouldReproduce(){\n  return this.age > this.reproductiveAge && this.food > this.reproductiveFoodRequirement\n\n  }\n    }\n\nmodule.exports = Rabbit;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/rabbit.js\n// module id = 3\n// module chunks = 0","class Animal{\n  constructor(cell){\n    this.cell = cell;\n    this.alive = true;\n    this.updateCell = this.updateCell.bind(this);\n    this.kill = this.kill.bind(this);\n  }\n\nupdateCell(cell){\n  this.cell = cell;\n}\nkill(){\n  this.alive = false;\n}\n}\n\nmodule.exports = Animal;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/animal.js\n// module id = 4\n// module chunks = 0","const Animal = require('./animal.js');\n\nclass Wolf extends Animal{\nconstructor(cell){\n  super(cell);\n  this.food = 50;\n  this.age = 0;\n  this.name = \"wolf\";\n  this.alive = true;\n\n\n  this.maxAge = 50;\n  this.maxFood = 200;\n  this.metabolicRate = 4;\n  this.reproductiveAge = 10;\n  this.reproductiveFoodRequirement = 20;\n\n  this.randomNeighbor = this.randomNeighbor.bind(this);\n  this.openSpaces = this.openSpaces.bind(this);\n  this.eat = this.eat.bind(this);\n  this.shouldReproduce = this.shouldReproduce.bind(this);\n  this.mortality = this.mortality.bind(this);\n}\n\n\n\nmortality(){\n  this.age ++;\n  this.food -= this.metabolicRate;\n  if(this.age > this.maxAge || this.food < 1){\n    this.kill();\n  }\n\n}\nopenSpaces(){\n  let neighbors = this.cell.neighbors();\n\n  let rabbitSpaces = [];\n  let emptySpaces = [];\n    neighbors.forEach((neighbor) => {\n\n    if(neighbor.type == \"rabbit\"){\n      rabbitSpaces.push(neighbor);\n    } else if(neighbor.type == \"grass\"){\n      emptySpaces.push(neighbor);\n    }\n  });\n  if(rabbitSpaces.length > 0){\n  emptySpaces = rabbitSpaces;\n  }\n  return emptySpaces;\n}\n\nrandomNeighbor(){\n\n let openSpaces = this.openSpaces();\n let idx = Math.floor(Math.random() * openSpaces.length);\n let result = [this.cell.currentX, this.cell.currentY];\n if(openSpaces[idx] !== undefined){\n  //  debugger\n   let neighbor = openSpaces[idx];\n   this.eat(neighbor.animal);\n   result = [neighbor.currentX, neighbor.currentY];\n}\n  return result;\n}\n\neat(rabbit){\n  if(rabbit !== null){\n    if(this.food < this.maxFood){\n      this.food += rabbit.food;\n      rabbit.kill();\n    }\n  }\n\n}\n\nshouldReproduce(){\n  return this.age > this.reproductiveAge && this.food > this.reproductiveFoodRequirement\n}\n\n}\n\nmodule.exports = Wolf;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/wolf.js\n// module id = 5\n// module chunks = 0"],"sourceRoot":""}